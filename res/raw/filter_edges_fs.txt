
uniform vec2 uPixelSize;

vec3 filter(vec3 color, sampler2D texture, vec2 texturePos) {
	float pix[9];
	vec3 sample;
	
	for (int i = 0; i < 3; ++i)
	for (int j = 0; j < 3; ++j) {
		sample = texture2D(texture, texturePos + vec2(i - 1, j - 1) * uPixelSize).rgb;
		pix[i * 3 + j] = length(sample);
	}
	
	float delta = (
		abs(pix[1]-pix[7]) +
		abs(pix[5]-pix[3]) +
		abs(pix[0]-pix[8]) +
		abs(pix[2]-pix[6]) ) * 0.25;
	
	return vec3(0.8 * delta, 1.2 * delta, 2.0 * delta);
}
