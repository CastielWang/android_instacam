/*
   Copyright 2012 Harri Smatt

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

precision mediump float;

uniform sampler2D sTexture;

uniform int uFilter;
uniform float uBrightness;
uniform float uContrast;
uniform float uSaturation;
uniform float uCornerRadius;

varying vec2 vTextureCoord;

vec3 brightness(vec3 color, float brightness) {
	float scaled = brightness / 2.0;
	if (scaled < 0.0) {
		return color * (1.0 + scaled);
	} else {
		return color + ((1.0 - color) * scaled);
	}
}

vec3 contrast(vec3 color, float contrast) {
	const float PI = 3.14159265;
	return min(vec3(1.0), ((color - 0.5) * (tan((contrast + 1.0) * PI / 4.0) ) + 0.5));
}

vec3 overlay(vec3 overlayComponent, vec3 underlayComponent, float alpha) {
	vec3 underlay = underlayComponent * alpha;
	return underlay * (underlay + (2.0 * overlayComponent * (1.0 - underlay)));
}

vec3 multiplyWithAlpha(vec3 overlayComponent, float alpha, vec3 underlayComponent) {
	return underlayComponent * overlayComponent * alpha;
}

vec3 screenPixelComponent(vec3 maskPixelComponent, float alpha, vec3 imagePixelComponent) {
	return 1.0 - (1.0 - (maskPixelComponent * alpha)) * (1.0 - imagePixelComponent);
}

float hueToRGB(float f1, float f2, float hue)
{
	if (hue < 0.0) hue += 1.0;
	else if (hue > 1.0)	hue -= 1.0;
	float res;
	if ((6.0 * hue) < 1.0) res = f1 + (f2 - f1) * 6.0 * hue;
	else if ((2.0 * hue) < 1.0) res = f2;
	else if ((3.0 * hue) < 2.0) res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
	else res = f1;
	return res;
}

vec3 rgbToHsl(vec3 color) {
	vec3 hsl;
	
	float fmin = min(min(color.r, color.g), color.b);
	float fmax = max(max(color.r, color.g), color.b);
	float delta = fmax - fmin;

	hsl.z = (fmax + fmin) / 2.0;

	if (delta == 0.0) {
		hsl.x = 0.0;	// Hue
		hsl.y = 0.0;	// Saturation
	} else {
		if (hsl.z < 0.5) hsl.y = delta / (fmax + fmin);
		else hsl.y = delta / (2.0 - fmax - fmin); // Saturation
		
		float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;
		float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;
		float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;

		if (color.r == fmax) hsl.x = deltaB - deltaG;
		else if (color.g == fmax) hsl.x = (1.0 / 3.0) + deltaR - deltaB;
		else if (color.b == fmax) hsl.x = (2.0 / 3.0) + deltaG - deltaR;

		if (hsl.x < 0.0) hsl.x += 1.0;
		else if (hsl.x > 1.0) hsl.x -= 1.0;
	}
	return hsl;
}

vec3 hslToRgb(vec3 hsl) {
	vec3 rgb;
	if (hsl.y == 0.0) rgb = vec3(hsl.z);
	else {
		float f2;
		
		if (hsl.z < 0.5) f2 = hsl.z * (1.0 + hsl.y);
		else f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);
		
		float f1 = 2.0 * hsl.z - f2;
		
		rgb.r = hueToRGB(f1, f2, hsl.x + (1.0/3.0));
		rgb.g = hueToRGB(f1, f2, hsl.x);
		rgb.b= hueToRGB(f1, f2, hsl.x - (1.0/3.0));
	}
	return rgb;
}

vec3 saturateMatrix(vec3 color, float saturate) {
	vec3 r = vec3(0.3086);
	r.r += saturate;
	vec3 g = vec3(0.6094);
	g.g += saturate;
	vec3 b = vec3(0.0820);
	b.b += saturate;
	
	mat3 m = mat3(r, g, b);
	return m * color;
}

void main() {
	vec3 color = texture2D(sTexture, vTextureCoord).rgb;
	
	// Black and White filter.
	if (uFilter == 1) {
		float gray = dot(color, vec3(0.299, 0.587, 0.114));
		color = vec3(gray);
	}
	// Ansel filter.
	if (uFilter == 2) {
		float gray = dot(color, vec3(0.299, 0.587, 0.114));
		if (gray > 0.5) {
			color = vec3(1.0 - (1.0 - 2.0 * (gray - 0.5)) * (1.0 - gray));
		} else {
			color = vec3(2.0 * gray * gray);
		}
	}
	// Sepia filter.
	if (uFilter == 3) {
		float luminosity = dot(color, vec3(0.21, 0.72, 0.07));
		float brightGray = brightness(vec3(luminosity), 0.234375).r;
		
		vec3 tinted = overlay(vec3(0.419, 0.259, 0.047), vec3(brightGray), 1.0);
		
		float invertMask = 1.0 - luminosity;
		float luminosity3 = pow(luminosity, 3.0);
		
		color = vec3(luminosity3) + (tinted * invertMask * (luminosity + 1.0));
	}
	// Retro filter.
	if (uFilter == 4) {
		float gray = dot(color, vec3(0.299, 0.587, 0.114));		
		color = overlay(vec3(gray), color, 1.0);
		color = multiplyWithAlpha(vec3(0.984, 0.949, 0.639), 0.588235, color);
		color = screenPixelComponent(vec3(0.909, 0.396, 0.702), 0.2, color);
		color = screenPixelComponent(vec3(0.035, 0.286, 0.914), 0.168627, color);
	}
	// Georgia filter.
	if (uFilter == 5) {		
		color = brightness(color, 0.4724);
		color = contrast(color, 0.3149);
		
		color.g = color.g * 0.87 + 0.13;
		color.b = color.b * 0.439 + 0.561;
		
		color *= vec3(0.981, 0.862, 0.686);
	}
	// Sahara filter.
	if (uFilter == 6) {
		color.r = color.r * 0.843 + 0.157;
		color.b = color.b * 0.882 + 0.118;
		
		vec3 hsl = rgbToHsl(color);
		hsl.y = hsl.y * 0.55;
		color = hslToRgb(hsl);
		
		color = saturateMatrix(color, 0.65);
		color *= vec3(1.0, 0.891, 0.733);
	}
	
	// Calculate brightness, contrast and saturation.
	color = brightness(color, uBrightness);
	color = contrast(color, uContrast);
	float average = dot(color, vec3(1.0)) / 3.0;
	if (uSaturation > 0.0) {
		color += (average - color) * (1.0 - 1.0 / (1.0 - uSaturation));
	} else {
		color += (average - color) * (-uSaturation);
	}
	
	// Calculate darkened corners.
	const float sqrt2 = 1.414213562373;
	float len = distance(vTextureCoord, vec2(0.5)) * sqrt2;
	len = smoothstep(1.0 - uCornerRadius, 1.0, len);
	color *= mix(0.5, 1.0, 1.0 - len);
	
	gl_FragColor = vec4(color, 1.0);
}
