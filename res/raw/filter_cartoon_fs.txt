
uniform vec2 uPixelSize;

vec3 filter(vec3 color, sampler2D texture, vec2 texturePos) {
	vec3 sample[9];
	vec3 border;		
	vec2 texCoord;
	
	int i = 0;
	color = vec3(0.0, 0.0, 0.0);
	texCoord.x = texturePos.x - uPixelSize.x * 1.5;
	for (int x = 0; x < 3; ++x) {
		texCoord.y = texturePos.y + uPixelSize.y * 1.5;
		for (int y = 0; y < 3; ++y) {
			sample[i] = texture2D(sTexture, texCoord).rgb;
			color += sample[i++];
			texCoord.y -= uPixelSize.y * 1.5;
		}
		texCoord.x += uPixelSize.x * 1.5;
	}
	color /= 9.0;
	
	vec3 horizEdge = sample[2] + sample[5] + sample[8] -
				(sample[0] + sample[3] + sample[6]);
	vec3 vertEdge = sample[0] + sample[1] + sample[2] -
				(sample[6] + sample[7] + sample[8]);

	border = sqrt((horizEdge * horizEdge) + 
				(vertEdge * vertEdge));

	if (border.r > 0.3 || border.g > 0.3 || border.b > 0.3){
		color *= 1.0 - dot(border, border);
	}
	
	const vec3 colorRed = vec3(1.0, 0.3, 0.3);
	const vec3 colorGreen = vec3(0.3, 1.0, 0.3);
	const vec3 colorBlue = vec3(0.3, 0.3, 1.0);
	
	color = floor(color * 8.0) * 0.125;
	color = colorRed * color.r + colorBlue * color.b + colorGreen * color.g;
	
	return color;
}
